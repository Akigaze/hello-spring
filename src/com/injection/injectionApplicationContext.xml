<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd">
  <!--bean标签中使用constructor-arg标签，可以根据constructor-arg的数量，index，type和顺序选用相应的构造方法-->
  <bean id="bmw" class="com.injection.Car">
    <!--对于复杂的值，可以使用value标签, 有特殊符号时，要想用 <![CDATA[....]]> 包起来-->
    <constructor-arg index="0">
      <value><![CDATA[<BMW^>]]></value>
    </constructor-arg>
    <constructor-arg value="200000" index="1" type="double"/>
  </bean>
  <bean id="bench" class="com.injection.Car">
    <constructor-arg value="Bench" index="0"/>
    <constructor-arg value="200" type="int"/>
  </bean>
  <!--constructor-arg标签也能和property标签，p名称空间混用-->
  <bean id="honda" class="com.injection.Car" p:maxSpeed="122" scope="prototype">
    <constructor-arg type="java.lang.String" value="Honda"/>
    <property name="price" value="50000"/>
  </bean>

  <!--util名称空间提供构建列表的list标签-->
  <util:list id="cars">
    <!--ref标签直接引用某个bean-->
    <ref bean="bmw"/>
    <ref bean="bench"/>
    <!--该bean只能通过所在list访问，并不是全局的bean-->
    <bean class="com.injection.Car">
      <constructor-arg value="Toyota" index="0"/>
      <constructor-arg value="180" type="int"/>
    </bean>
  </util:list>

  <bean id="tom" class="com.injection.Person">
    <property name="name" value="Tom"/>
    <property name="age" value="25"/>
    <!--property标签的ref属性可以引用某个bean作为属性值-->
    <property name="car" ref="bench"/>
  </bean>
  <bean id="james" class="com.injection.Person">
    <property name="name" value="Jam"/>
    <property name="age" value="30"/>
    <!--ref属性也可以用ref子标签代替，ref标签中bean属性引用某个bean的id-->
    <property name="car">
      <ref bean="bmw"/>
    </property>
    <!--property的name属性还支持嵌套设置引用类型属性的某些属性-->
    <property name="car.maxSpeed" value="3000"/>
  </bean>
  <bean id="sam" class="com.injection.Person">
    <constructor-arg value="Sam"/>
    <constructor-arg value="40"/>
    <!--constructor-arg标签中嵌套bean标签来构造参数-->
    <constructor-arg>
      <bean class="com.injection.Car">
        <constructor-arg value="Bench"/>
        <constructor-arg value="200" type="int"/>
      </bean>
    </constructor-arg>
  </bean>

  <bean id="laoWang" class="com.injection.Millionaire">
    <constructor-arg type="java.lang.String" value="Lao Wang"/>
    <constructor-arg type="int" value="50"/>
    <constructor-arg type="long" value="100000000"/>
    <constructor-arg type="java.util.List">
      <list>
        <ref bean="bmw"/>
        <ref bean="bench"/>
        <bean class="com.injection.Car">
          <constructor-arg value="Honda" index="0"/>
          <constructor-arg value="250" type="int"/>
        </bean>
      </list>
    </constructor-arg>
    <property name="servants">
      <!--map标签构建一个Map-->
      <map>
        <!--Map中的每个元素为以个entry标签-->
        <!--entry标签主要有key和value两个属性-->
        <entry key="james" value-ref="james"/>
        <entry key="sam" value-ref="sam"/>
        <entry key="older">
          <!--value值可以使用bean标签构建对象-->
          <bean class="com.injection.Person">
            <property name="name" value="Kid"/>
            <property name="age" value="18"/>
            <property name="car">
              <!--null标签可以将值赋值为null-->
              <null/>
            </property>
          </bean>
        </entry>
      </map>
    </property>
  </bean>
  <bean id="xiaoWang" class="com.injection.Millionaire">
    <constructor-arg type="java.lang.String" value="Xiao Wang"/>
    <constructor-arg type="int" value="28"/>
    <constructor-arg type="long" value="200000"/>
    <constructor-arg type="java.util.List" ref="cars"/>
  </bean>
  <!--depends-on属性指明了依赖的bean，只有当被依赖的bean存在(不需要初始化)时，该bean才能顺利初始化，但这两个bean可以没有任何引用关系-->
  <!--depends-on所依赖的bean没有初始化时，它会自动初始化它-->
  <bean id="maTengTeng" class="com.injection.Millionaire" depends-on="honda"
        p:name="Ma Teng Teng"
        p:age="50"
        p:asset="100000000"
        p:cars-ref="cars"/>
</beans>
