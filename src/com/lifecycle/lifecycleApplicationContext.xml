<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

  <!--init-method bean初始化完成后执行的方法-->
  <!--destroy-method Spring IOC容器销毁时执行的方法-->
  <!--destroy-method 只对单例的bean起作用，因为单例的bean是由Spring ICO容器管理的-->

  <!--
    生命周期执行顺序：
    constructor -> setter ->
    (BeanPostProcessor.postProcessBeforeInitialization) ->
    init-method ->
    (BeanPostProcessor.postProcessAfterInitialization) ->
    ... -> destroy-method
  -->

  <!--默认使用无参构造方法，p名称空间使用setter-->
  <bean id="byaKuYaKo" class="com.lifecycle.Book"
        init-method="onSale"
        destroy-method="recycle"
        p:name="白夜行"
        p:author="东野圭吾"
        p:pageSize="500"
        p:status="producing"/>

  <!--根据constructor-arg标签的数量，顺序和参数类型，使用对应的构造方法-->
  <bean id="houGaGou" class="com.lifecycle.Book" scope="prototype"
        init-method="onSale" destroy-method="recycle">
    <constructor-arg type="java.lang.String" value="放学后"/>
    <constructor-arg type="java.lang.String" value="东野圭吾"/>
    <constructor-arg type="int" value="200"/>
    <constructor-arg type="java.lang.String" value="producing"/>
  </bean>

  <!--后置处理器也必须创建bean才能发挥作用，Spring会自动安排使用它-->
  <bean class="com.lifecycle.BookPostProcessor"/>
</beans>