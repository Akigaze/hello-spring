<?com.xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
  <bean id="stringCalculator" class="com.aop.aspectj.StringCalculator"/>
  <!--切面了必须加入到 Spring IOC的管理-->
  <bean id="logAspect" class="com.aop.aspectj.LogAspect"/>

  <!--使用aop名称空间配置AOP相关的信息-->
  <aop:config>
    <!-- aop:pointcut 标签，定义切入点，哪些方法要添加切面-->
    <!--expression属性用于匹配切面，包含 "*", "." 等通配符-->
    <!--参考：https://www.baeldung.com/spring-aop-pointcut-tutorial-->
    <aop:pointcut id="aspect" expression="execution(public * com.aop.universal.Calculator.*(..))"/>

    <!--aop:aspect 标签将某个对象用于AOP的切面-->
    <!--当添加多个切面时，可以使用 order 属性设置优先级-->
    <aop:aspect ref="logAspect" order="1">
      <!--五种切面类型：before, after, after-returning, after-throwing, around-->
      <!--method属性指定对应切面要执行的方法， pointcut-ref 属性指定使用的切面对象-->
      <!--
        切面方法的执行顺序：
        before ->
        around(before -> return - throw -> after)
        after-returning - after-throwing ->
        after
      -->
      <!--after-throwing切面只有在抛异常才会起作用-->
      <aop:before method="logBefore" pointcut-ref="aspect"/>
      <aop:after method="logAfter" pointcut-ref="aspect"/>
      <!--after-returning标签会将目标方法执行的返回值注入到切面方法的 returning 属性指定的形参-->
      <aop:after-returning method="logReturn" pointcut-ref="aspect" returning="result"/>
      <!--after-throwing标签会将目标方法抛出的异常注入到切面方法的 throwing 属性指定的形参-->
      <aop:after-throwing method="logException" pointcut-ref="aspect" throwing="e"/>
      <aop:around method="logAround" pointcut-ref="aspect"/>
    </aop:aspect>
  </aop:config>
</beans>
